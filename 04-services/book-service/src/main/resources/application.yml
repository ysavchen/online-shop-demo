spring:
  application:
    name: book-service
    org: online-shop-demo
  datasource:
    url: jdbc:postgresql://localhost:5432/online_shop_demo?currentSchema=book_service
    username: app_user
    password: app_password
    hikari:
      connection-timeout: 3000 # default is 30000
  data.web:
    pageable:
      one-indexed-parameters: true # config doesn't work, bug in Spring
  jpa:
    open-in-view: false
  liquibase:
    change-log: classpath:liquibase/master.yaml

server:
  port: 8090
  shutdown: graceful

management:
  health:
    disk-space.enabled: false
  endpoint:
    health:
      show-components: always
      probes.enabled: true
      group:
        readiness:
          include:
            - readinessState
            - db
  endpoints:
    web.exposure.include: health,metrics,prometheus
  observations:
    key-values.org: ${spring.application.org}
  metrics:
    tags:
      application: ${spring.application.name}
    distribution:
      # Publish a cumulative histogram with buckets defined by your service-level objectives
      # 50ms should be most common for internal requests
      # 100ms is low latency for external requests
      # 300ms should be most common for external requests
      # 500ms is high latency for external requests
      slo.http.server.requests: 50ms, 100ms, 300ms, 500ms, 1s, 2s, 5s

      # Publish percentile values computed in your application
      # 0.5 exposes medium latency
      # 0.95 exposes the tail of the latency distribution
      percentiles.http.server.requests: 0.5, 0.95
  # By default, Spring Boot samples only 10% of requests to prevent overwhelming the trace backend.
  # This property switches it to 100% so that every request is sent to the trace backend.
  tracing:
    sampling:
      probability: 1.0