spring:
  application:
    name: order-service
    org: online-shop-demo
  datasource:
    url: jdbc:postgresql://localhost:5432/online_shop_demo?currentSchema=order_service
    username: app_user
    password: app_password
    hikari:
      data-source-properties:
        ApplicationName: ${spring.application.name}
        assumeMinServerVersion: 17.0
      pool-name: ${spring.application.name}-pool
      connection-timeout: 10000      # default is 30000
  data:
    web:
      pageable:
        one-indexed-parameters: true # config doesn't work, bug in Spring
    redis:
      client-name: ${spring.application.name}
      host: localhost
      port: 6379
      connect-timeout: 10000
  jpa:
    open-in-view: false
    properties:
      hibernate:
        default_batch_fetch_size: 10
  liquibase:
    change-log: classpath:liquibase/master.yaml

server:
  port: 8091
  shutdown: graceful

application:
  timezone: Europe/Moscow
  features:
    book-validation:
      enabled: true
  clients:
    book-service:
      http:
        base-url: http://localhost:8090
    order-service:
      kafka:
        connection:
          bootstrap-servers: http://localhost:9092
        domain.producer:
          topic: order-service.domain
    delivery-service:
      kafka:
        connection:
          bootstrap-servers: http://localhost:9092
        request.producer:
          topic: delivery-service.request
        response.consumer:
          group-id: ${spring.application.name}
          topics: delivery-service.response

management:
  health:
    disk-space.enabled: false
  endpoint:
    health:
      show-components: always
      probes.enabled: true
      group:
        readiness:
          include:
            - readinessState
            - db
  endpoints:
    web.exposure.include: health,metrics,prometheus
  observations:
    key-values.org: ${spring.application.org}
  metrics:
    tags:
      application: ${spring.application.name}
    distribution:
      # Publish a cumulative histogram with buckets defined by your service-level objectives
      slo.http.server.requests: 50ms, 100ms, 200ms, 300ms, 500ms, 1s, 2s, 5s
  tracing:
    sampling:
      probability: 1.0

logging:
  level:
    root: info