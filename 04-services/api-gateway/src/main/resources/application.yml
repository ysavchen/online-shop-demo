spring:
  application:
    name: api-gateway
    org: online-shop-demo
  cloud:
    gateway:
      actuator:
        verbose.enabled: true
      routes:
        - id: book-service
          uri: ${BOOK_SERVICE_URL:http://localhost:8090}
          predicates:
            - Path=/api-gateway/api/v1/books/**
          filters:
            - RewritePath=/api-gateway/(?<path>.*), /$\{path}
            - name: RequestRateLimiter
              args:
                redis-rate-limiter:
                  replenishRate: 15  # допустимое количество запросов в секунду при нормальной нагрузке
                  burstCapacity: 15  # максимальное количество запросов в секунду в случае всплеска нагрузки
                  requestedTokens: 1 # вес запроса в виде количества токенов в корзине

        - id: order-service
          uri: ${ORDER_SERVICE_URL:http://localhost:8091}
          predicates:
            - Path=/api-gateway/api/v1/orders/**
          filters:
            - RewritePath=/api-gateway/(?<path>.*), /$\{path}
            - name: RequestRateLimiter
              args:
                redis-rate-limiter:
                  replenishRate: 15
                  burstCapacity: 15
  data:
    redis:
      host: localhost
      port: 6379
      connect-timeout: 10000

server:
  port: 8080
  shutdown: graceful

management:
  health:
    disk-space.enabled: false
  # gateway.enabled is true by default in docs, but in fact it's false
  # bug in docs or implementation
  endpoint:
    gateway.enabled: true
    health:
      show-components: always
      probes.enabled: true
      group:
        readiness:
          include:
            - readinessState
            - redis
  endpoints:
    web.exposure.include: health,gateway,metrics,prometheus
  observations:
    key-values.org: ${spring.application.org}
  metrics:
    tags:
      application: ${spring.application.name}
    distribution:
      # Publish a cumulative histogram with buckets defined by your service-level objectives
      slo.http.server.requests: 50ms, 100ms, 200ms, 300ms, 500ms, 1s, 2s, 5s
  # By default, Spring Boot samples only 10% of requests to prevent overwhelming the trace backend.
  # This property switches it to 100% so that every request is sent to the trace backend.
  tracing:
    sampling:
      probability: 1.0

logging:
  level:
    root: info
    org.springframework.cloud.gateway: info