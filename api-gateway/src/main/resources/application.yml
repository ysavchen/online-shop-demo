spring:
  application:
    name: api-gateway
  cloud:
    gateway:
      actuator:
        verbose.enabled: true
      routes:
        - id: book-service
          uri: ${BOOK_SERVICE_URL:http://localhost:8090}
          predicates:
            - Path=/api-gateway/api/v1/books/**
          filters:
            - RewritePath=/api-gateway/(?<path>.*), /$\{path}
            - name: RequestRateLimiter
              args:
                redis-rate-limiter:
                  replenishRate: 1 # допустимое количество запросов в секунду при нормальной нагрузке
                  burstCapacity: 60 # максимальное количество запросов в секунду в случае всплеска нагрузки
                  requestedTokens: 60 # вес запроса в виде количества токенов в корзине

        - id: order-service
          uri: ${ORDER_SERVICE_URL:http://localhost:8091}
          predicates:
            - Path=/api-gateway/api/v1/orders/**
          filters:
            - RewritePath=/api-gateway/(?<path>.*), /$\{path}
            - name: RequestRateLimiter
              args:
                redis-rate-limiter:
                  replenishRate: 15
                  burstCapacity: 15

server:
  port: 8080
  shutdown: graceful

management:
  health:
    redis.enabled: true
    probes.enabled: true
  endpoint:
    gateway.enabled: true
  endpoints:
    web.exposure.include: health,gateway,metrics,prometheus
  metrics:
    tags:
      application: ${spring.application.name}

logging:
  level:
    org.springframework.cloud.gateway: DEBUG